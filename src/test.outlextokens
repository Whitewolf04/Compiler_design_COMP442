[class, class, 1] [id, POLYNOMIAL, 1] [opencubr, {, 1] 
[public, public, 2] [function, function, 2] [id, evaluate, 2] [colon, :, 2] [openpar, (, 2] [id, x, 2] [colon, :, 2] [integer, integer, 2] [closepar, ), 2] [returntype, =>, 2] [integer, integer, 2] [semicol, ;, 2] 
[closecubr, }, 3] [semicol, ;, 3] 
[class, class, 5] [id, RANDOM, 5] [isa, isa, 5] [id, POLYNOMIAL, 5] [opencubr, {, 5] 
[public, public, 6] [function, function, 6] [id, test, 6] [colon, :, 6] [openpar, (, 6] [closepar, ), 6] [returntype, =>, 6] [void, void, 6] [semicol, ;, 6] 
[private, private, 7] [attribute, attribute, 7] [id, a, 7] [colon, :, 7] [integer, integer, 7] [semicol, ;, 7] 
[inlinecmt, //private attribute a: integer;\n, 8]
[inlinecmt, //public attribute b: QUADRATIC[];\n, 9]
[closecubr, }, 10] [semicol, ;, 10] 
[class, class, 12] [id, LINEAR, 12] [isa, isa, 12] [id, POLYNOMIAL, 12] [comma, ,, 12] [id, RANDOM, 12] [opencubr, {, 12] 
[private, private, 13] [attribute, attribute, 13] [id, a, 13] [colon, :, 13] [integer, integer, 13] [semicol, ;, 13] 
[private, private, 14] [attribute, attribute, 14] [id, b, 14] [colon, :, 14] [integer, integer, 14] [semicol, ;, 14] 
[public, public, 15] [constructor, constructor, 15] [colon, :, 15] [openpar, (, 15] [id, A, 15] [colon, :, 15] [integer, integer, 15] [comma, ,, 15] [id, B, 15] [colon, :, 15] [integer, integer, 15] [closepar, ), 15] [semicol, ;, 15] 
[private, private, 16] [function, function, 16] [id, evaluate, 16] [colon, :, 16] [openpar, (, 16] [id, x, 16] [colon, :, 16] [integer, integer, 16] [closepar, ), 16] [returntype, =>, 16] [integer, integer, 16] [semicol, ;, 16] 
[closecubr, }, 17] [semicol, ;, 17] 
[class, class, 19] [id, QUADRATIC, 19] [isa, isa, 19] [id, POLYNOMIAL, 19] [opencubr, {, 19] 
[private, private, 20] [attribute, attribute, 20] [id, a, 20] [colon, :, 20] [integer, integer, 20] [semicol, ;, 20] 
[private, private, 21] [attribute, attribute, 21] [id, b, 21] [colon, :, 21] [integer, integer, 21] [semicol, ;, 21] 
[private, private, 22] [attribute, attribute, 22] [id, c, 22] [colon, :, 22] [integer, integer, 22] [semicol, ;, 22] 
[private, private, 23] [attribute, attribute, 23] [id, d, 23] [colon, :, 23] [id, RANDOM, 23] [opensqbr, [, 23] [closesqbr, ], 23] [semicol, ;, 23] 
[public, public, 24] [constructor, constructor, 24] [colon, :, 24] [openpar, (, 24] [id, A, 24] [colon, :, 24] [integer, integer, 24] [comma, ,, 24] [id, B, 24] [colon, :, 24] [integer, integer, 24] [comma, ,, 24] [id, C, 24] [colon, :, 24] [integer, integer, 24] [closepar, ), 24] [semicol, ;, 24] 
[public, public, 25] [constructor, constructor, 25] [colon, :, 25] [openpar, (, 25] [id, A, 25] [colon, :, 25] [integer, integer, 25] [closepar, ), 25] [semicol, ;, 25] 
[public, public, 26] [function, function, 26] [id, evaluate, 26] [colon, :, 26] [openpar, (, 26] [id, x, 26] [colon, :, 26] [integer, integer, 26] [closepar, ), 26] [returntype, =>, 26] [integer, integer, 26] [semicol, ;, 26] 
[closecubr, }, 27] [semicol, ;, 27] 
[inlinecmt, // Multiple class declaration error test\n, 29]
[class, class, 30] [id, QUADRATIC, 30] [isa, isa, 30] [id, POLYNOMIAL, 30] [opencubr, {, 30] 
[private, private, 31] [attribute, attribute, 31] [id, a, 31] [colon, :, 31] [integer, integer, 31] [semicol, ;, 31] 
[private, private, 32] [attribute, attribute, 32] [id, b, 32] [colon, :, 32] [integer, integer, 32] [semicol, ;, 32] 
[public, public, 33] [constructor, constructor, 33] [colon, :, 33] [openpar, (, 33] [id, A, 33] [colon, :, 33] [integer, integer, 33] [comma, ,, 33] [id, B, 33] [colon, :, 33] [integer, integer, 33] [comma, ,, 33] [id, C, 33] [colon, :, 33] [integer, integer, 33] [closepar, ), 33] [semicol, ;, 33] 
[closecubr, }, 34] [semicol, ;, 34] 
[inlinecmt, // ====== member function implementations ====== //  \n, 36]
[function, function, 37] [id, POLYNOMIAL, 37] [scopeop, ::, 37] [id, evaluate, 37] [openpar, (, 37] [id, x, 37] [colon, :, 37] [integer, integer, 37] [closepar, ), 37] [returntype, =>, 37] [integer, integer, 37] 
[opencubr, {, 38] 
[return, return, 39] [openpar, (, 39] [intnum, 0, 39] [closepar, ), 39] [semicol, ;, 39] 
[closecubr, }, 40] 
[function, function, 42] [id, QUADRATIC, 42] [scopeop, ::, 42] [id, evaluate, 42] [openpar, (, 42] [id, x, 42] [colon, :, 42] [integer, integer, 42] [closepar, ), 42] [returntype, =>, 42] [integer, integer, 42] 
[opencubr, {, 43] 
[localvar, localvar, 44] [id, result, 44] [colon, :, 44] [integer, integer, 44] [semicol, ;, 44] 
[localvar, localvar, 45] [id, a, 45] [colon, :, 45] [float, float, 45] [semicol, ;, 45] 
[inlinecmt, // Over-shadowed member variable test\n, 45]
[inlinecmt, //Using Horner's method\n, 46]
[id, result, 47] [assign, =, 47] [id, a, 47] [semicol, ;, 47] 
[id, result, 48] [assign, =, 48] [id, result, 48] [mult, *, 48] [id, x, 48] [plus, +, 48] [id, b, 48] [semicol, ;, 48] 
[id, result, 49] [assign, =, 49] [id, result, 49] [mult, *, 49] [not, not, 49] [id, x, 49] [plus, +, 49] [id, c, 49] [semicol, ;, 49] 
[return, return, 50] [openpar, (, 50] [id, result, 50] [closepar, ), 50] [semicol, ;, 50] 
[closecubr, }, 51] 
[function, function, 53] [id, QUADRATIC, 53] [scopeop, ::, 53] [constructor, constructor, 53] [openpar, (, 53] [id, A, 53] [colon, :, 53] [integer, integer, 53] [comma, ,, 53] [id, B, 53] [colon, :, 53] [integer, integer, 53] [comma, ,, 53] [id, C, 53] [colon, :, 53] [integer, integer, 53] [closepar, ), 53] 
[opencubr, {, 54] 
[id, self, 55] [dot, ., 55] [id, a, 55] [assign, =, 55] [id, A, 55] [semicol, ;, 55] 
[id, self, 56] [dot, ., 56] [id, b, 56] [assign, =, 56] [id, B, 56] [semicol, ;, 56] 
[id, self, 57] [dot, ., 57] [id, c, 57] [assign, =, 57] [id, C, 57] [semicol, ;, 57] 
[closecubr, }, 58] 
[function, function, 60] [id, QUADRATIC, 60] [scopeop, ::, 60] [constructor, constructor, 60] [openpar, (, 60] [id, A, 60] [colon, :, 60] [integer, integer, 60] [closepar, ), 60] 
[opencubr, {, 61] 
[id, self, 62] [dot, ., 62] [id, a, 62] [assign, =, 62] [id, A, 62] [semicol, ;, 62] 
[closecubr, }, 63] 
[function, function, 65] [id, LINEAR, 65] [scopeop, ::, 65] [constructor, constructor, 65] [openpar, (, 65] [id, A, 65] [colon, :, 65] [integer, integer, 65] [comma, ,, 65] [id, B, 65] [colon, :, 65] [integer, integer, 65] [closepar, ), 65] 
[opencubr, {, 66] 
[id, self, 67] [dot, ., 67] [id, a, 67] [assign, =, 67] [id, A, 67] [semicol, ;, 67] 
[id, self, 68] [dot, ., 68] [id, b, 68] [assign, =, 68] [id, B, 68] [semicol, ;, 68] 
[closecubr, }, 69] 
[function, function, 71] [id, LINEAR, 71] [scopeop, ::, 71] [id, evaluate, 71] [openpar, (, 71] [id, x, 71] [colon, :, 71] [integer, integer, 71] [closepar, ), 71] [returntype, =>, 71] [integer, integer, 71] 
[opencubr, {, 72] 
[localvar, localvar, 73] [id, result, 73] [colon, :, 73] [integer, integer, 73] [semicol, ;, 73] 
[id, result, 74] [assign, =, 74] [intnum, 0, 74] [semicol, ;, 74] 
[id, result, 75] [assign, =, 75] [id, self, 75] [dot, ., 75] [id, a, 75] [mult, *, 75] [id, x, 75] [plus, +, 75] [id, b, 75] [semicol, ;, 75] 
[return, return, 76] [openpar, (, 76] [id, result, 76] [closepar, ), 76] [semicol, ;, 76] 
[closecubr, }, 77] 
[function, function, 79] [id, count, 79] [openpar, (, 79] [id, x, 79] [colon, :, 79] [integer, integer, 79] [closepar, ), 79] [returntype, =>, 79] [integer, integer, 79] 
[opencubr, {, 80] 
[return, return, 81] [openpar, (, 81] [id, x, 81] [closepar, ), 81] [semicol, ;, 81] 
[closecubr, }, 82] 
[inlinecmt, // ====== main ====== //\n, 84]
[function, function, 85] [id, prog, 85] [openpar, (, 85] [closepar, ), 85] [returntype, =>, 85] [void, void, 85] 
[opencubr, {, 86] 
[localvar, localvar, 87] [id, f1, 87] [colon, :, 87] [id, LINEAR, 87] [openpar, (, 87] [minus, -, 87] [intnum, 2, 87] [comma, ,, 87] [intnum, 3, 87] [closepar, ), 87] [semicol, ;, 87] 
[localvar, localvar, 88] [id, f2, 88] [colon, :, 88] [id, QUADRATIC, 88] [openpar, (, 88] [minus, -, 88] [intnum, 2, 88] [comma, ,, 88] [intnum, 1, 88] [comma, ,, 88] [intnum, 0, 88] [closepar, ), 88] [semicol, ;, 88] 
[localvar, localvar, 89] [id, counter, 89] [colon, :, 89] [integer, integer, 89] [semicol, ;, 89] 
[localvar, localvar, 90] [id, test, 90] [colon, :, 90] [id, count, 90] [openpar, (, 90] [intnum, 2, 90] [closepar, ), 90] [semicol, ;, 90] 
[id, counter, 92] [assign, =, 92] [minus, -, 92] [intnum, 1, 92] [semicol, ;, 92] 
[write, write, 93] [openpar, (, 93] [id, f2, 93] [dot, ., 93] [id, a, 93] [closepar, ), 93] [semicol, ;, 93] 
[while, while, 95] [openpar, (, 95] [id, counter, 95] [leq, <=, 95] [intnum, 10, 95] [closepar, ), 95] 
[opencubr, {, 96] 
[inlinecmt, //write(counter);\n, 97]
[inlinecmt, //write(f1.evaluate(counter));\n, 98]
[inlinecmt, //write(f2.evaluate(counter));\n, 99]
[inlinecmt, //write(f1.a);\n, 100]
[id, counter, 101] [assign, =, 101] [id, counter, 101] [plus, +, 101] [intnum, 1, 101] [semicol, ;, 101] 
[closecubr, }, 102] [semicol, ;, 102] 
[closecubr, }, 103] 
[function, function, 105] [id, prog, 105] [openpar, (, 105] [closepar, ), 105] [returntype, =>, 105] [void, void, 105] 
[opencubr, {, 106] 
[localvar, localvar, 107] [id, f3, 107] [colon, :, 107] [id, LINEAR, 107] [openpar, (, 107] [intnum, 1, 107] [comma, ,, 107] [intnum, 2, 107] [closepar, ), 107] [semicol, ;, 107] 
[closecubr, }, 108] 
