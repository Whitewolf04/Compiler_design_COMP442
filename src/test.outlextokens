[class, class, 1] [id, POLYNOMIAL, 1] [opencubr, {, 1] 
[public, public, 2] [function, function, 2] [id, evaluate, 2] [colon, :, 2] [openpar, (, 2] [id, x, 2] [colon, :, 2] [integer, integer, 2] [closepar, ), 2] [returntype, =>, 2] [integer, integer, 2] [semicol, ;, 2] 
[closecubr, }, 3] [semicol, ;, 3] 
[class, class, 5] [id, RANDOM, 5] [isa, isa, 5] [id, POLYNOMIAL, 5] [opencubr, {, 5] 
[public, public, 6] [function, function, 6] [id, test, 6] [colon, :, 6] [openpar, (, 6] [closepar, ), 6] [returntype, =>, 6] [void, void, 6] [semicol, ;, 6] 
[private, private, 7] [attribute, attribute, 7] [id, a, 7] [colon, :, 7] [integer, integer, 7] [semicol, ;, 7] 
[private, private, 8] [attribute, attribute, 8] [id, a, 8] [colon, :, 8] [integer, integer, 8] [semicol, ;, 8] 
[closecubr, }, 9] [semicol, ;, 9] 
[class, class, 11] [id, LINEAR, 11] [isa, isa, 11] [id, POLYNOMIAL, 11] [comma, ,, 11] [id, RANDOM, 11] [opencubr, {, 11] 
[private, private, 12] [attribute, attribute, 12] [id, a, 12] [colon, :, 12] [integer, integer, 12] [semicol, ;, 12] 
[private, private, 13] [attribute, attribute, 13] [id, b, 13] [colon, :, 13] [integer, integer, 13] [semicol, ;, 13] 
[public, public, 14] [constructor, constructor, 14] [colon, :, 14] [openpar, (, 14] [id, A, 14] [colon, :, 14] [integer, integer, 14] [comma, ,, 14] [id, B, 14] [colon, :, 14] [integer, integer, 14] [closepar, ), 14] [semicol, ;, 14] 
[public, public, 15] [function, function, 15] [id, evaluate, 15] [colon, :, 15] [openpar, (, 15] [id, x, 15] [colon, :, 15] [integer, integer, 15] [closepar, ), 15] [returntype, =>, 15] [integer, integer, 15] [semicol, ;, 15] 
[closecubr, }, 16] [semicol, ;, 16] 
[class, class, 18] [id, QUADRATIC, 18] [isa, isa, 18] [id, POLYNOMIAL, 18] [opencubr, {, 18] 
[private, private, 19] [attribute, attribute, 19] [id, a, 19] [colon, :, 19] [integer, integer, 19] [semicol, ;, 19] 
[private, private, 20] [attribute, attribute, 20] [id, b, 20] [colon, :, 20] [integer, integer, 20] [semicol, ;, 20] 
[private, private, 21] [attribute, attribute, 21] [id, c, 21] [colon, :, 21] [integer, integer, 21] [semicol, ;, 21] 
[public, public, 22] [constructor, constructor, 22] [colon, :, 22] [openpar, (, 22] [id, A, 22] [colon, :, 22] [integer, integer, 22] [comma, ,, 22] [id, B, 22] [colon, :, 22] [integer, integer, 22] [comma, ,, 22] [id, C, 22] [colon, :, 22] [integer, integer, 22] [closepar, ), 22] [semicol, ;, 22] 
[public, public, 23] [constructor, constructor, 23] [colon, :, 23] [openpar, (, 23] [id, A, 23] [colon, :, 23] [integer, integer, 23] [closepar, ), 23] [semicol, ;, 23] 
[public, public, 24] [function, function, 24] [id, evaluate, 24] [colon, :, 24] [openpar, (, 24] [id, x, 24] [colon, :, 24] [integer, integer, 24] [closepar, ), 24] [returntype, =>, 24] [integer, integer, 24] [semicol, ;, 24] 
[closecubr, }, 25] [semicol, ;, 25] 
[inlinecmt, // ====== member function implementations ====== //  \n, 27]
[function, function, 28] [id, POLYNOMIAL, 28] [scopeop, ::, 28] [id, evaluate, 28] [openpar, (, 28] [id, x, 28] [colon, :, 28] [integer, integer, 28] [closepar, ), 28] [returntype, =>, 28] [integer, integer, 28] 
[opencubr, {, 29] 
[return, return, 30] [openpar, (, 30] [intnum, 0, 30] [closepar, ), 30] [semicol, ;, 30] 
[closecubr, }, 31] 
[function, function, 33] [id, QUADRATIC, 33] [scopeop, ::, 33] [id, evaluate, 33] [openpar, (, 33] [id, x, 33] [colon, :, 33] [integer, integer, 33] [closepar, ), 33] [returntype, =>, 33] [integer, integer, 33] 
[opencubr, {, 34] 
[localvar, localvar, 35] [id, result, 35] [colon, :, 35] [integer, integer, 35] [semicol, ;, 35] 
[inlinecmt, //Using Horner's method\n, 36]
[id, result, 37] [assign, =, 37] [id, a, 37] [semicol, ;, 37] 
[id, result, 38] [assign, =, 38] [id, result, 38] [mult, *, 38] [id, x, 38] [plus, +, 38] [id, b, 38] [semicol, ;, 38] 
[id, result, 39] [assign, =, 39] [id, result, 39] [mult, *, 39] [not, not, 39] [id, x, 39] [plus, +, 39] [id, c, 39] [semicol, ;, 39] 
[return, return, 40] [openpar, (, 40] [id, result, 40] [closepar, ), 40] [semicol, ;, 40] 
[closecubr, }, 41] 
[function, function, 43] [id, QUADRATIC, 43] [scopeop, ::, 43] [constructor, constructor, 43] [openpar, (, 43] [id, A, 43] [colon, :, 43] [integer, integer, 43] [comma, ,, 43] [id, B, 43] [colon, :, 43] [integer, integer, 43] [comma, ,, 43] [id, C, 43] [colon, :, 43] [integer, integer, 43] [closepar, ), 43] 
[opencubr, {, 44] 
[id, self, 45] [dot, ., 45] [id, a, 45] [assign, =, 45] [id, A, 45] [semicol, ;, 45] 
[id, self, 46] [dot, ., 46] [id, b, 46] [assign, =, 46] [id, B, 46] [semicol, ;, 46] 
[id, self, 47] [dot, ., 47] [id, c, 47] [assign, =, 47] [id, C, 47] [semicol, ;, 47] 
[closecubr, }, 48] 
[function, function, 50] [id, QUADRATIC, 50] [scopeop, ::, 50] [constructor, constructor, 50] [openpar, (, 50] [id, A, 50] [colon, :, 50] [integer, integer, 50] [closepar, ), 50] 
[opencubr, {, 51] 
[id, self, 52] [dot, ., 52] [id, a, 52] [assign, =, 52] [id, A, 52] [semicol, ;, 52] 
[closecubr, }, 53] 
[function, function, 55] [id, LINEAR, 55] [scopeop, ::, 55] [constructor, constructor, 55] [openpar, (, 55] [id, A, 55] [colon, :, 55] [integer, integer, 55] [comma, ,, 55] [id, B, 55] [colon, :, 55] [integer, integer, 55] [closepar, ), 55] 
[opencubr, {, 56] 
[id, self, 57] [dot, ., 57] [id, a, 57] [assign, =, 57] [id, A, 57] [semicol, ;, 57] 
[id, self, 58] [dot, ., 58] [id, b, 58] [assign, =, 58] [id, B, 58] [semicol, ;, 58] 
[closecubr, }, 59] 
[function, function, 61] [id, LINEAR, 61] [scopeop, ::, 61] [id, evaluate, 61] [openpar, (, 61] [id, x, 61] [colon, :, 61] [integer, integer, 61] [closepar, ), 61] [returntype, =>, 61] [integer, integer, 61] 
[opencubr, {, 62] 
[localvar, localvar, 63] [id, result, 63] [colon, :, 63] [integer, integer, 63] [semicol, ;, 63] 
[id, result, 64] [assign, =, 64] [intnum, 0, 64] [semicol, ;, 64] 
[id, result, 65] [assign, =, 65] [id, a, 65] [mult, *, 65] [id, x, 65] [plus, +, 65] [id, b, 65] [semicol, ;, 65] 
[return, return, 66] [openpar, (, 66] [id, result, 66] [closepar, ), 66] [semicol, ;, 66] 
[closecubr, }, 67] 
[function, function, 69] [id, count, 69] [openpar, (, 69] [id, x, 69] [colon, :, 69] [integer, integer, 69] [closepar, ), 69] [returntype, =>, 69] [integer, integer, 69] 
[opencubr, {, 70] 
[return, return, 71] [openpar, (, 71] [id, x, 71] [closepar, ), 71] [semicol, ;, 71] 
[closecubr, }, 72] 
[inlinecmt, // ====== main ====== //\n, 74]
[function, function, 75] [id, main, 75] [openpar, (, 75] [closepar, ), 75] [returntype, =>, 75] [void, void, 75] 
[opencubr, {, 76] 
[localvar, localvar, 77] [id, f1, 77] [colon, :, 77] [id, LINEAR, 77] [openpar, (, 77] [intnum, 2, 77] [comma, ,, 77] [intnum, 3, 77] [closepar, ), 77] [semicol, ;, 77] 
[localvar, localvar, 78] [id, f2, 78] [colon, :, 78] [id, QUADRATIC, 78] [openpar, (, 78] [minus, -, 78] [intnum, 2, 78] [comma, ,, 78] [intnum, 1, 78] [comma, ,, 78] [intnum, 0, 78] [closepar, ), 78] [semicol, ;, 78] 
[localvar, localvar, 79] [id, counter, 79] [colon, :, 79] [integer, integer, 79] [semicol, ;, 79] 
[localvar, localvar, 80] [id, test, 80] [colon, :, 80] [id, count, 80] [openpar, (, 80] [intnum, 2, 80] [closepar, ), 80] [semicol, ;, 80] 
[id, counter, 82] [assign, =, 82] [intnum, 1, 82] [semicol, ;, 82] 
[while, while, 84] [openpar, (, 84] [id, counter, 84] [leq, <=, 84] [intnum, 10, 84] [closepar, ), 84] 
[opencubr, {, 85] 
[write, write, 86] [openpar, (, 86] [id, counter, 86] [closepar, ), 86] [semicol, ;, 86] 
[write, write, 87] [openpar, (, 87] [id, f1, 87] [dot, ., 87] [id, evaluate, 87] [openpar, (, 87] [id, counter, 87] [closepar, ), 87] [closepar, ), 87] [semicol, ;, 87] 
[write, write, 88] [openpar, (, 88] [id, f2, 88] [dot, ., 88] [id, evaluate, 88] [openpar, (, 88] [id, counter, 88] [closepar, ), 88] [closepar, ), 88] [semicol, ;, 88] 
[closecubr, }, 89] [semicol, ;, 89] 
[closecubr, }, 90] 
