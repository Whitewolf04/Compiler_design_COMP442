[blockcmt, /* sort the array */, 1]

[function, function, 2] [id, bubbleSort, 2] [openpar, (, 2] [id, arr, 2] [colon, :, 2] [integer, integer, 2] [opensqbr, [, 2] [intnum, 7, 2] [closesqbr, ], 2] [comma, ,, 2] [id, size, 2] [colon, :, 2] [integer, integer, 2] [closepar, ), 2] [returntype, =>, 2] [void, void, 2] 
[opencubr, {, 3] 
[localvar, localvar, 4] [id, n, 4] [colon, :, 4] [integer, integer, 4] [semicol, ;, 4] 
[localvar, localvar, 5] [id, i, 5] [colon, :, 5] [integer, integer, 5] [semicol, ;, 5] 
[localvar, localvar, 6] [id, j, 6] [colon, :, 6] [integer, integer, 6] [semicol, ;, 6] 
[localvar, localvar, 7] [id, temp, 7] [colon, :, 7] [integer, integer, 7] [semicol, ;, 7] 
[id, n, 8] [assign, =, 8] [id, size, 8] [semicol, ;, 8] 
[id, i, 9] [assign, =, 9] [intnum, 0, 9] [semicol, ;, 9] 
[id, j, 10] [assign, =, 10] [intnum, 0, 10] [semicol, ;, 10] 
[id, temp, 11] [assign, =, 11] [intnum, 0, 11] [semicol, ;, 11] 
[while, while, 12] [openpar, (, 12] [id, i, 12] [lt, <, 12] [id, n, 12] [minus, -, 12] [intnum, 1, 12] [closepar, ), 12] [opencubr, {, 12] 
[while, while, 13] [openpar, (, 13] [id, j, 13] [lt, <, 13] [id, n, 13] [minus, -, 13] [id, i, 13] [minus, -, 13] [intnum, 1, 13] [closepar, ), 13] [opencubr, {, 13] 
[if, if, 14] [openpar, (, 14] [id, arr, 14] [opensqbr, [, 14] [id, j, 14] [closesqbr, ], 14] [gt, >, 14] [id, arr, 14] [opensqbr, [, 14] [id, j, 14] [plus, +, 14] [intnum, 1, 14] [closesqbr, ], 14] [closepar, ), 14] 
[then, then, 15] [opencubr, {, 15] 
[inlinecmt, // swap temp and arr[i]\n, 16]
[id, temp, 17] [assign, =, 17] [id, arr, 17] [opensqbr, [, 17] [id, j, 17] [closesqbr, ], 17] [semicol, ;, 17] 
[id, arr, 18] [opensqbr, [, 18] [id, j, 18] [closesqbr, ], 18] [assign, =, 18] [id, arr, 18] [opensqbr, [, 18] [id, j, 18] [plus, +, 18] [intnum, 1, 18] [closesqbr, ], 18] [semicol, ;, 18] 
[id, arr, 19] [opensqbr, [, 19] [id, j, 19] [plus, +, 19] [intnum, 1, 19] [closesqbr, ], 19] [assign, =, 19] [id, temp, 19] [semicol, ;, 19] 
[closecubr, }, 20] [else, else, 20] [semicol, ;, 20] 
[id, j, 21] [assign, =, 21] [id, j, 21] [plus, +, 21] [intnum, 1, 21] [semicol, ;, 21] 
[closecubr, }, 22] [semicol, ;, 22] 
[id, i, 23] [assign, =, 23] [id, i, 23] [plus, +, 23] [intnum, 1, 23] [semicol, ;, 23] 
[closecubr, }, 24] [semicol, ;, 24] 
[closecubr, }, 25] 
[blockcmt, /* print the array */, 27]
[function, function, 28] [id, printArray, 28] [openpar, (, 28] [id, arr, 28] [colon, :, 28] [integer, integer, 28] [opensqbr, [, 28] [intnum, 7, 28] [closesqbr, ], 28] [comma, ,, 28] [id, size, 28] [colon, :, 28] [integer, integer, 28] [closepar, ), 28] [returntype, =>, 28] [void, void, 28] 
[opencubr, {, 29] 
[localvar, localvar, 30] [id, n, 30] [colon, :, 30] [integer, integer, 30] [semicol, ;, 30] 
[localvar, localvar, 31] [id, i, 31] [colon, :, 31] [integer, integer, 31] [semicol, ;, 31] 
[id, n, 32] [assign, =, 32] [id, size, 32] [semicol, ;, 32] 
[id, i, 33] [assign, =, 33] [intnum, 0, 33] [semicol, ;, 33] 
[while, while, 34] [openpar, (, 34] [id, i, 34] [lt, <, 34] [id, n, 34] [closepar, ), 34] [opencubr, {, 34] 
[inlinecmt, //write(i);\n, 35]
[write, write, 36] [openpar, (, 36] [id, arr, 36] [opensqbr, [, 36] [id, i, 36] [closesqbr, ], 36] [closepar, ), 36] [semicol, ;, 36] 
[id, i, 37] [assign, =, 37] [id, i, 37] [plus, +, 37] [intnum, 1, 37] [semicol, ;, 37] 
[closecubr, }, 38] [semicol, ;, 38] 
[closecubr, }, 39] 
[inlinecmt, // main funtion to test above\n, 41]
[function, function, 42] [id, main, 42] [openpar, (, 42] [closepar, ), 42] [returntype, =>, 42] [void, void, 42] 
[opencubr, {, 43] 
[localvar, localvar, 44] [id, arr, 44] [colon, :, 44] [integer, integer, 44] [opensqbr, [, 44] [intnum, 7, 44] [closesqbr, ], 44] [semicol, ;, 44] 
[id, arr, 45] [opensqbr, [, 45] [intnum, 0, 45] [closesqbr, ], 45] [assign, =, 45] [intnum, 64, 45] [semicol, ;, 45] 
[id, arr, 46] [opensqbr, [, 46] [intnum, 1, 46] [closesqbr, ], 46] [assign, =, 46] [intnum, 34, 46] [semicol, ;, 46] 
[id, arr, 47] [opensqbr, [, 47] [intnum, 2, 47] [closesqbr, ], 47] [assign, =, 47] [intnum, 25, 47] [semicol, ;, 47] 
[id, arr, 48] [opensqbr, [, 48] [intnum, 3, 48] [closesqbr, ], 48] [assign, =, 48] [intnum, 12, 48] [semicol, ;, 48] 
[id, arr, 49] [opensqbr, [, 49] [intnum, 4, 49] [closesqbr, ], 49] [assign, =, 49] [intnum, 22, 49] [semicol, ;, 49] 
[id, arr, 50] [opensqbr, [, 50] [intnum, 5, 50] [closesqbr, ], 50] [assign, =, 50] [intnum, 11, 50] [semicol, ;, 50] 
[id, arr, 51] [opensqbr, [, 51] [intnum, 6, 51] [closesqbr, ], 51] [assign, =, 51] [intnum, 90, 51] [semicol, ;, 51] 
[write, write, 52] [openpar, (, 52] [id, arr, 52] [opensqbr, [, 52] [intnum, 0, 52] [closesqbr, ], 52] [closepar, ), 52] [semicol, ;, 52] 
[write, write, 53] [openpar, (, 53] [id, arr, 53] [opensqbr, [, 53] [intnum, 1, 53] [closesqbr, ], 53] [closepar, ), 53] [semicol, ;, 53] 
[write, write, 54] [openpar, (, 54] [id, arr, 54] [opensqbr, [, 54] [intnum, 2, 54] [closesqbr, ], 54] [closepar, ), 54] [semicol, ;, 54] 
[write, write, 55] [openpar, (, 55] [id, arr, 55] [opensqbr, [, 55] [intnum, 3, 55] [closesqbr, ], 55] [closepar, ), 55] [semicol, ;, 55] 
[write, write, 56] [openpar, (, 56] [id, arr, 56] [opensqbr, [, 56] [intnum, 4, 56] [closesqbr, ], 56] [closepar, ), 56] [semicol, ;, 56] 
[write, write, 57] [openpar, (, 57] [id, arr, 57] [opensqbr, [, 57] [intnum, 5, 57] [closesqbr, ], 57] [closepar, ), 57] [semicol, ;, 57] 
[write, write, 58] [openpar, (, 58] [id, arr, 58] [opensqbr, [, 58] [intnum, 6, 58] [closesqbr, ], 58] [closepar, ), 58] [semicol, ;, 58] 
[id, printArray, 59] [openpar, (, 59] [id, arr, 59] [comma, ,, 59] [intnum, 7, 59] [closepar, ), 59] [semicol, ;, 59] 
[inlinecmt, //bubbleSort(arr, 7);\n, 60]
[inlinecmt, //printArray(arr, 7); \n, 61]
[closecubr, }, 62] 
[blockcmt, /*\n    classes\n    --------------------------------------\n|X| no class declaration\n| | class declaration\n| | multiple class declarations\n| | no data member declaration\n| | data member declaration\n| | multiple data member declaration\n| | no member function declaration\n| | member function declaration\n| | multiple member function declaration\n| | no member\n| | no inherited class\n| | one inherited class\n| | multiple inherited classes\n| | private member specifier\n| | public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n| | no free function definition\n|X| free function definition\n|X| multiple free function definitions\n|X| no member function definition\n| | member function definition\n| | multiple member function definitions\n|X| return type: void\n| | return type: integer\n| | return type: float\n| | return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n|X| type: array (without size)\n\n    functions: calls\n    --------------------------------------\n|X| free function call\n| | member function call\n| | parameters:0\n| | parameters:1\n|X| parameters:n\n|X| array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n| | function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: string\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n|X| type: array (with size)\n| | type: array (without size) (not allowed)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n|X| if statement\n|X| if: empty then or else blocks\n| | if: 1-statement then or else blocks\n|X| if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n| | id.id\n| | id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n|X| single variable\n|X| involving addop\n| | involving multop\n|X| involving relop\n| | involving addop + multop\n|X| involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parentheses\n| | involving not\n| | involving sign\n|X| involving literals\n| | involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/, 64]
