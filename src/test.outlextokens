[class, class, 1] [id, POLYNOMIAL, 1] [opencubr, {, 1] 
[public, public, 2] [function, function, 2] [id, evaluate, 2] [colon, :, 2] [openpar, (, 2] [id, x, 2] [colon, :, 2] [float, float, 2] [closepar, ), 2] [returntype, =>, 2] [float, float, 2] [semicol, ;, 2] 
[closecubr, }, 3] [semicol, ;, 3] 
[class, class, 5] [id, LINEAR, 5] [isa, isa, 5] [id, POLYNOMIAL, 5] [opencubr, {, 5] 
[private, private, 6] [attribute, attribute, 6] [id, a, 6] [colon, :, 6] [float, float, 6] [semicol, ;, 6] 
[private, private, 7] [attribute, attribute, 7] [id, b, 7] [colon, :, 7] [float, float, 7] [semicol, ;, 7] 
[public, public, 8] [constructor, constructor, 8] [colon, :, 8] [openpar, (, 8] [id, A, 8] [colon, :, 8] [float, float, 8] [comma, ,, 8] [id, B, 8] [colon, :, 8] [float, float, 8] [closepar, ), 8] [semicol, ;, 8] 
[public, public, 9] [function, function, 9] [id, evaluate, 9] [colon, :, 9] [openpar, (, 9] [id, x, 9] [colon, :, 9] [float, float, 9] [closepar, ), 9] [returntype, =>, 9] [float, float, 9] [semicol, ;, 9] 
[closecubr, }, 10] [semicol, ;, 10] 
[class, class, 12] [id, QUADRATIC, 12] [isa, isa, 12] [id, POLYNOMIAL, 12] [opencubr, {, 12] 
[private, private, 13] [attribute, attribute, 13] [id, a, 13] [colon, :, 13] [float, float, 13] [semicol, ;, 13] 
[private, private, 14] [attribute, attribute, 14] [id, b, 14] [colon, :, 14] [float, float, 14] [semicol, ;, 14] 
[private, private, 15] [attribute, attribute, 15] [id, c, 15] [colon, :, 15] [float, float, 15] [semicol, ;, 15] 
[public, public, 16] [constructor, constructor, 16] [colon, :, 16] [openpar, (, 16] [id, A, 16] [colon, :, 16] [float, float, 16] [comma, ,, 16] [id, B, 16] [colon, :, 16] [float, float, 16] [comma, ,, 16] [id, C, 16] [colon, :, 16] [float, float, 16] [closepar, ), 16] [semicol, ;, 16] 
[public, public, 17] [function, function, 17] [id, evaluate, 17] [colon, :, 17] [openpar, (, 17] [id, x, 17] [colon, :, 17] [float, float, 17] [closepar, ), 17] [returntype, =>, 17] [float, float, 17] [semicol, ;, 17] 
[closecubr, }, 18] [semicol, ;, 18] 
[inlinecmt, // ====== member function implementations ====== //  \n, 20]
[function, function, 21] [id, POLYNOMIAL, 21] [scopeop, ::, 21] [id, evaluate, 21] [openpar, (, 21] [id, x, 21] [colon, :, 21] [float, float, 21] [closepar, ), 21] [returntype, =>, 21] [float, float, 21] 
[opencubr, {, 22] 
[return, return, 23] [openpar, (, 23] [intnum, 0, 23] [closepar, ), 23] [semicol, ;, 23] 
[closecubr, }, 24] 
[function, function, 26] [id, QUADRATIC, 26] [scopeop, ::, 26] [id, evaluate, 26] [openpar, (, 26] [id, x, 26] [colon, :, 26] [float, float, 26] [closepar, ), 26] [returntype, =>, 26] [float, float, 26] 
[opencubr, {, 27] 
[localvar, localvar, 28] [id, result, 28] [colon, :, 28] [float, float, 28] [semicol, ;, 28] 
[inlinecmt, //Using Horner's method\n, 29]
[id, result, 30] [assign, =, 30] [id, a, 30] [semicol, ;, 30] 
[id, result, 31] [assign, =, 31] [id, result, 31] [mult, *, 31] [id, x, 31] [plus, +, 31] [id, b, 31] [semicol, ;, 31] 
[id, result, 32] [assign, =, 32] [id, result, 32] [mult, *, 32] [not, not, 32] [id, x, 32] [plus, +, 32] [id, c, 32] [semicol, ;, 32] 
[return, return, 33] [openpar, (, 33] [id, result, 33] [closepar, ), 33] [semicol, ;, 33] 
[closecubr, }, 34] 
[function, function, 36] [id, QUADRATIC, 36] [scopeop, ::, 36] [constructor, constructor, 36] [openpar, (, 36] [id, A, 36] [colon, :, 36] [float, float, 36] [comma, ,, 36] [id, B, 36] [colon, :, 36] [float, float, 36] [comma, ,, 36] [id, C, 36] [colon, :, 36] [float, float, 36] [closepar, ), 36] 
[opencubr, {, 37] 
[id, self, 38] [dot, ., 38] [id, a, 38] [assign, =, 38] [id, id, 38] [openpar, (, 38] [id, id, 38] [closepar, ), 38] [dot, ., 38] [id, id, 38] [opensqbr, [, 38] [id, id, 38] [closesqbr, ], 38] [opensqbr, [, 38] [id, id, 38] [closesqbr, ], 38] [semicol, ;, 38] 
[id, self, 39] [dot, ., 39] [id, b, 39] [assign, =, 39] [id, B, 39] [semicol, ;, 39] 
[id, self, 40] [dot, ., 40] [id, c, 40] [assign, =, 40] [id, C, 40] [semicol, ;, 40] 
[closecubr, }, 41] 
[function, function, 43] [id, LINEAR, 43] [scopeop, ::, 43] [constructor, constructor, 43] [openpar, (, 43] [id, A, 43] [colon, :, 43] [float, float, 43] [comma, ,, 43] [id, B, 43] [colon, :, 43] [float, float, 43] [closepar, ), 43] 
[opencubr, {, 44] 
[id, self, 45] [dot, ., 45] [id, a, 45] [assign, =, 45] [id, A, 45] [semicol, ;, 45] 
[id, self, 46] [dot, ., 46] [id, b, 46] [assign, =, 46] [id, B, 46] [semicol, ;, 46] 
[closecubr, }, 47] 
[function, function, 49] [id, LINEAR, 49] [scopeop, ::, 49] [id, evaluate, 49] [openpar, (, 49] [id, x, 49] [colon, :, 49] [float, float, 49] [closepar, ), 49] [returntype, =>, 49] [float, float, 49] 
[opencubr, {, 50] 
[localvar, localvar, 51] [id, result, 51] [colon, :, 51] [float, float, 51] [semicol, ;, 51] 
[id, result, 52] [assign, =, 52] [floatnum, 0.0, 52] [semicol, ;, 52] 
[id, result, 53] [assign, =, 53] [id, a, 53] [mult, *, 53] [id, x, 53] [plus, +, 53] [id, b, 53] [semicol, ;, 53] 
[return, return, 54] [openpar, (, 54] [id, result, 54] [closepar, ), 54] [semicol, ;, 54] 
[closecubr, }, 55] 
[inlinecmt, // ====== main ====== //\n, 57]
[function, function, 58] [id, main, 58] [openpar, (, 58] [closepar, ), 58] [returntype, =>, 58] [void, void, 58] 
[opencubr, {, 59] 
[localvar, localvar, 60] [id, f1, 60] [colon, :, 60] [id, LINEAR, 60] [openpar, (, 60] [intnum, 2, 60] [comma, ,, 60] [floatnum, 3.5, 60] [closepar, ), 60] [semicol, ;, 60] 
[localvar, localvar, 61] [id, f2, 61] [colon, :, 61] [id, QUADRATIC, 61] [openpar, (, 61] [minus, -, 61] [floatnum, 2.0, 61] [comma, ,, 61] [floatnum, 1.0, 61] [comma, ,, 61] [floatnum, 0.0, 61] [closepar, ), 61] [semicol, ;, 61] 
[localvar, localvar, 62] [id, counter, 62] [colon, :, 62] [integer, integer, 62] [semicol, ;, 62] 
[localvar, localvar, 63] [id, test, 63] [colon, :, 63] [id, count, 63] [openpar, (, 63] [closepar, ), 63] [semicol, ;, 63] 
[id, counter, 65] [assign, =, 65] [intnum, 1, 65] [semicol, ;, 65] 
[while, while, 67] [openpar, (, 67] [id, counter, 67] [leq, <=, 67] [intnum, 10, 67] [closepar, ), 67] 
[opencubr, {, 68] 
[write, write, 69] [openpar, (, 69] [id, counter, 69] [closepar, ), 69] [semicol, ;, 69] 
[write, write, 70] [openpar, (, 70] [id, f1, 70] [dot, ., 70] [id, evaluate, 70] [openpar, (, 70] [id, counter, 70] [closepar, ), 70] [closepar, ), 70] [semicol, ;, 70] 
[write, write, 71] [openpar, (, 71] [id, f2, 71] [dot, ., 71] [id, evaluate, 71] [openpar, (, 71] [id, counter, 71] [closepar, ), 71] [closepar, ), 71] [semicol, ;, 71] 
[closecubr, }, 72] [semicol, ;, 72] 
[closecubr, }, 73] 
[function, function, 75] [id, count, 75] [openpar, (, 75] [id, x, 75] [colon, :, 75] [integer, integer, 75] [closepar, ), 75] [returntype, =>, 75] [integer, integer, 75] 
[opencubr, {, 76] 
[return, return, 77] [openpar, (, 77] [id, x, 77] [closepar, ), 77] [semicol, ;, 77] 
[closecubr, }, 78] 
