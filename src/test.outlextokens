
[inlinecmt, // ====== Class declarations ====== //\n, 1]
[class, class, 2] [id, POLYNOMIAL, 2] [opencubr, {, 2] 
[public, public, 3] [function, function, 3] [id, evaluate, 3] [colon, :, 3] [openpar, (, 3] [id, x, 3] [colon, :, 3] [float, float, 3] [closepar, ), 3] [returntype, =>, 3] [float, float, 3] [semicol, ;, 3] 
[public, public, 4] [function, function, 4] [id, evaluate2, 4] [colon, :, 4] [openpar, (, 4] [id, x, 4] [colon, :, 4] [float, float, 4] [closepar, ), 4] [returntype, =>, 4] [float, float, 4] [semicol, ;, 4] 
[inlinecmt, // 6.2\n, 4]
[closecubr, }, 5] [semicol, ;, 5] 
[class, class, 6] [id, POLYNOMIALS, 6] [opencubr, {, 6] 
[inlinecmt, // 8.1\n, 6]
[public, public, 7] [function, function, 7] [id, evaluate, 7] [colon, :, 7] [openpar, (, 7] [id, x, 7] [colon, :, 7] [float, float, 7] [closepar, ), 7] [returntype, =>, 7] [float, float, 7] [semicol, ;, 7] 
[public, public, 8] [function, function, 8] [id, evaluate, 8] [colon, :, 8] [openpar, (, 8] [id, x, 8] [colon, :, 8] [integer, integer, 8] [closepar, ), 8] [returntype, =>, 8] [integer, integer, 8] [semicol, ;, 8] 
[inlinecmt, // 9.2\n, 8]
[closecubr, }, 9] [semicol, ;, 9] 
[class, class, 10] [id, LINEAR, 10] [isa, isa, 10] [id, POLYNOMIAL, 10] [opencubr, {, 10] 
[private, private, 11] [attribute, attribute, 11] [id, a, 11] [colon, :, 11] [float, float, 11] [semicol, ;, 11] 
[private, private, 12] [attribute, attribute, 12] [id, b, 12] [colon, :, 12] [float, float, 12] [semicol, ;, 12] 
[private, private, 13] [attribute, attribute, 13] [id, b, 13] [colon, :, 13] [integer, integer, 13] [semicol, ;, 13] 
[inlinecmt, // 8.3\n, 13]
[public, public, 15] [constructor, constructor, 15] [colon, :, 15] [openpar, (, 15] [id, A, 15] [colon, :, 15] [float, float, 15] [comma, ,, 15] [id, B, 15] [colon, :, 15] [float, float, 15] [closepar, ), 15] [semicol, ;, 15] 
[public, public, 16] [function, function, 16] [id, evaluate, 16] [colon, :, 16] [openpar, (, 16] [id, x, 16] [colon, :, 16] [float, float, 16] [closepar, ), 16] [returntype, =>, 16] [float, float, 16] [semicol, ;, 16] 
[inlinecmt, // 9.3\n, 16]
[closecubr, }, 17] [semicol, ;, 17] 
[class, class, 19] [id, QUADRATIC, 19] [isa, isa, 19] [id, POLYNOMIAL, 19] [opencubr, {, 19] 
[private, private, 20] [attribute, attribute, 20] [id, a, 20] [colon, :, 20] [float, float, 20] [semicol, ;, 20] 
[private, private, 21] [attribute, attribute, 21] [id, b, 21] [colon, :, 21] [float, float, 21] [semicol, ;, 21] 
[private, private, 22] [attribute, attribute, 22] [id, c, 22] [colon, :, 22] [float, float, 22] [semicol, ;, 22] 
[public, public, 24] [constructor, constructor, 24] [colon, :, 24] [openpar, (, 24] [id, A, 24] [colon, :, 24] [float, float, 24] [comma, ,, 24] [id, B, 24] [colon, :, 24] [float, float, 24] [comma, ,, 24] [id, C, 24] [colon, :, 24] [float, float, 24] [closepar, ), 24] [semicol, ;, 24] 
[public, public, 25] [function, function, 25] [id, evaluate, 25] [colon, :, 25] [openpar, (, 25] [id, x, 25] [colon, :, 25] [float, float, 25] [closepar, ), 25] [returntype, =>, 25] [float, float, 25] [semicol, ;, 25] 
[inlinecmt, // 9.3\n, 25]
[closecubr, }, 26] [semicol, ;, 26] 
[class, class, 28] [id, newClass, 28] [isa, isa, 28] [id, LINEAR, 28] [opencubr, {, 28] 
[private, private, 29] [attribute, attribute, 29] [id, a, 29] [colon, :, 29] [float, float, 29] [semicol, ;, 29] 
[inlinecmt, // 8.5\n, 29]
[private, private, 30] [attribute, attribute, 30] [id, b, 30] [colon, :, 30] [integer, integer, 30] [semicol, ;, 30] 
[inlinecmt, // 8.5\n, 30]
[closecubr, }, 31] [semicol, ;, 31] 
[class, class, 33] [id, C, 33] [isa, isa, 33] [id, E, 33] [opencubr, {, 33] 
[private, private, 34] [attribute, attribute, 34] [id, a, 34] [colon, :, 34] [integer, integer, 34] [semicol, ;, 34] 
[closecubr, }, 35] [semicol, ;, 35] 
[class, class, 37] [id, D, 37] [isa, isa, 37] [id, C, 37] [opencubr, {, 37] 
[private, private, 38] [attribute, attribute, 38] [id, b, 38] [colon, :, 38] [integer, integer, 38] [semicol, ;, 38] 
[closecubr, }, 39] [semicol, ;, 39] 
[class, class, 41] [id, E, 41] [isa, isa, 41] [id, D, 41] [opencubr, {, 41] 
[inlinecmt, // 14.1\n, 41]
[private, private, 42] [attribute, attribute, 42] [id, c, 42] [colon, :, 42] [integer, integer, 42] [semicol, ;, 42] 
[closecubr, }, 43] [semicol, ;, 43] 
[inlinecmt, // ====== member function implementations ====== //\n, 46]
[function, function, 47] [id, POLYNOMIAL, 47] [scopeop, ::, 47] [id, evaluate, 47] [openpar, (, 47] [id, x, 47] [colon, :, 47] [float, float, 47] [closepar, ), 47] [returntype, =>, 47] [float, float, 47] 
[opencubr, {, 48] 
[return, return, 49] [openpar, (, 49] [intnum, 0, 49] [closepar, ), 49] [semicol, ;, 49] 
[closecubr, }, 50] 
[function, function, 53] [id, LINEAR, 53] [scopeop, ::, 53] [constructor, constructor, 53] [openpar, (, 53] [id, A, 53] [colon, :, 53] [float, float, 53] [comma, ,, 53] [id, B, 53] [colon, :, 53] [float, float, 53] [closepar, ), 53] 
[opencubr, {, 54] 
[localvar, localvar, 55] [id, new_function, 55] [colon, :, 55] [id, LINEAR, 55] [semicol, ;, 55] 
[id, new_function, 56] [dot, ., 56] [id, a, 56] [assign, =, 56] [id, A, 56] [semicol, ;, 56] 
[id, new_function, 57] [dot, ., 57] [id, b, 57] [assign, =, 57] [id, B, 57] [semicol, ;, 57] 
[inlinecmt, //return (new_function);\n, 58]
[closecubr, }, 59] 
[function, function, 61] [id, LINEAR, 61] [scopeop, ::, 61] [id, evaluate, 61] [openpar, (, 61] [id, x, 61] [colon, :, 61] [float, float, 61] [closepar, ), 61] [returntype, =>, 61] [float, float, 61] 
[opencubr, {, 62] 
[localvar, localvar, 63] [id, result, 63] [colon, :, 63] [float, float, 63] [semicol, ;, 63] 
[id, result, 64] [assign, =, 64] [floatnum, 0.0, 64] [semicol, ;, 64] 
[id, result, 65] [assign, =, 65] [id, a, 65] [mult, *, 65] [id, x, 65] [plus, +, 65] [id, b, 65] [semicol, ;, 65] 
[return, return, 66] [openpar, (, 66] [id, result, 66] [closepar, ), 66] [semicol, ;, 66] 
[closecubr, }, 67] 
[function, function, 69] [id, QUADRATIC, 69] [scopeop, ::, 69] [id, evaluate, 69] [openpar, (, 69] [id, x, 69] [colon, :, 69] [float, float, 69] [closepar, ), 69] [returntype, =>, 69] [float, float, 69] 
[opencubr, {, 70] 
[localvar, localvar, 71] [id, result, 71] [colon, :, 71] [float, float, 71] [semicol, ;, 71] 
[inlinecmt, //Using Horner's method\n, 72]
[id, result, 73] [assign, =, 73] [id, a, 73] [semicol, ;, 73] 
[id, result, 74] [assign, =, 74] [id, result, 74] [mult, *, 74] [id, x, 74] [plus, +, 74] [id, b, 74] [semicol, ;, 74] 
[id, result, 75] [assign, =, 75] [id, result, 75] [mult, *, 75] [id, x, 75] [plus, +, 75] [id, c, 75] [semicol, ;, 75] 
[id, result, 76] [assign, =, 76] [id, self, 76] [dot, ., 76] [id, a, 76] [semicol, ;, 76] 
[id, result, 77] [assign, =, 77] [id, a, 77] [dot, ., 77] [id, self, 77] [semicol, ;, 77] 
[inlinecmt, // 15.2\n, 77]
[return, return, 78] [openpar, (, 78] [id, result, 78] [closepar, ), 78] [semicol, ;, 78] 
[closecubr, }, 79] 
[function, function, 81] [id, QUADRATIC, 81] [scopeop, ::, 81] [constructor, constructor, 81] [openpar, (, 81] [id, A, 81] [colon, :, 81] [float, float, 81] [comma, ,, 81] [id, B, 81] [colon, :, 81] [float, float, 81] [comma, ,, 81] [id, C, 81] [colon, :, 81] [float, float, 81] [closepar, ), 81] 
[opencubr, {, 82] 
[localvar, localvar, 83] [id, new_function, 83] [colon, :, 83] [id, QUADRATIC, 83] [semicol, ;, 83] 
[id, new_function, 84] [dot, ., 84] [id, a, 84] [assign, =, 84] [id, A, 84] [plus, +, 84] [id, B, 84] [mult, *, 84] [intnum, 3, 84] [semicol, ;, 84] 
[inlinecmt, // 10.1\n, 84]
[id, new_function, 85] [dot, ., 85] [id, b, 85] [assign, =, 85] [id, B, 85] [semicol, ;, 85] 
[id, new_function, 86] [dot, ., 86] [id, c, 86] [assign, =, 86] [intnum, 1, 86] [semicol, ;, 86] 
[inlinecmt, // 10.2 \n, 86]
[return, return, 87] [openpar, (, 87] [intnum, 1, 87] [closepar, ), 87] [semicol, ;, 87] 
[inlinecmt, // 10.3\n, 87]
[closecubr, }, 88] 
[blockcmt, /*function QUADRATIC::build2(A: float, B: float, C: float) => QUADRATIC      // 6.1\n  {\n    localvar new_function: QUADRATIC;\n    new_function.a = A;\n    new_function.b = B;\n    new_function.c = C;\n    return (new_function);\n  }\n  */, 90]
[function, function, 100] [id, f, 100] [openpar, (, 100] [id, i, 100] [colon, :, 100] [integer, integer, 100] [closepar, ), 100] [returntype, =>, 100] [void, void, 100] [opencubr, {, 100] [closecubr, }, 100] 
[function, function, 101] [id, f, 101] [openpar, (, 101] [id, i, 101] [colon, :, 101] [integer, integer, 101] [closepar, ), 101] [returntype, =>, 101] [void, void, 101] [opencubr, {, 101] [closecubr, }, 101] 
[inlinecmt, // 8.2\n, 101]
[function, function, 102] [id, f, 102] [openpar, (, 102] [id, i, 102] [colon, :, 102] [integer, integer, 102] [comma, ,, 102] [id, j, 102] [colon, :, 102] [integer, integer, 102] [closepar, ), 102] [returntype, =>, 102] [integer, integer, 102] [opencubr, {, 102] [closecubr, }, 102] 
[inlinecmt, // 9.1\n, 102]
[function, function, 104] [id, f3, 104] [openpar, (, 104] [id, p1, 104] [colon, :, 104] [integer, integer, 104] [opensqbr, [, 104] [intnum, 2, 104] [closesqbr, ], 104] [opensqbr, [, 104] [intnum, 3, 104] [closesqbr, ], 104] [closepar, ), 104] [returntype, =>, 104] [integer, integer, 104] [opencubr, {, 104] [closecubr, }, 104] 
[inlinecmt, // ====== main ====== //\n, 107]
[function, function, 108] [id, main, 108] [openpar, (, 108] [closepar, ), 108] [returntype, =>, 108] [void, void, 108] 
[opencubr, {, 109] 
[localvar, localvar, 110] [id, a, 110] [colon, :, 110] [id, a, 110] [semicol, ;, 110] 
[inlinecmt, // 11.5\n, 110]
[localvar, localvar, 111] [id, c, 111] [colon, :, 111] [id, C, 111] [semicol, ;, 111] 
[localvar, localvar, 112] [id, f1, 112] [colon, :, 112] [id, LINEAR, 112] [semicol, ;, 112] 
[localvar, localvar, 113] [id, f2, 113] [colon, :, 113] [id, QUADRATIC, 113] [semicol, ;, 113] 
[localvar, localvar, 114] [id, counter, 114] [colon, :, 114] [integer, integer, 114] [semicol, ;, 114] 
[inlinecmt, //localvar counter: float;                                                 // 8.4\n, 115]
[localvar, localvar, 116] [id, i, 116] [colon, :, 116] [integer, integer, 116] [opensqbr, [, 116] [intnum, 2, 116] [closesqbr, ], 116] [opensqbr, [, 116] [intnum, 3, 116] [closesqbr, ], 116] [semicol, ;, 116] 
[localvar, localvar, 117] [id, j, 117] [colon, :, 117] [integer, integer, 117] [opensqbr, [, 117] [intnum, 1, 117] [closesqbr, ], 117] [opensqbr, [, 117] [intnum, 2, 117] [closesqbr, ], 117] [opensqbr, [, 117] [intnum, 3, 117] [closesqbr, ], 117] [semicol, ;, 117] 
[write, write, 118] [openpar, (, 118] [id, f1, 118] [dot, ., 118] [id, a, 118] [closepar, ), 118] [semicol, ;, 118] 
[write, write, 119] [openpar, (, 119] [id, f2, 119] [dot, ., 119] [id, b, 119] [closepar, ), 119] [semicol, ;, 119] 
[id, f1, 120] [assign, =, 120] [id, f1, 120] [dot, ., 120] [id, build, 120] [openpar, (, 120] [intnum, 2, 120] [comma, ,, 120] [floatnum, 3.5, 120] [closepar, ), 120] [semicol, ;, 120] 
[id, f2, 121] [assign, =, 121] [id, f2, 121] [dot, ., 121] [id, build, 121] [openpar, (, 121] [minus, -, 121] [floatnum, 2.0, 121] [comma, ,, 121] [floatnum, 1.0, 121] [comma, ,, 121] [floatnum, 0.0, 121] [closepar, ), 121] [semicol, ;, 121] 
[id, c, 122] [dot, ., 122] [id, b, 122] [assign, =, 122] [intnum, 1, 122] [semicol, ;, 122] 
[inlinecmt, // 11.2\n, 122]
[id, counter, 123] [assign, =, 123] [id, c, 123] [dot, ., 123] [id, f, 123] [openpar, (, 123] [closepar, ), 123] [semicol, ;, 123] 
[inlinecmt, // 11.3\n, 123]
[id, undefined, 124] [openpar, (, 124] [closepar, ), 124] [semicol, ;, 124] 
[inlinecmt, // 11.4\n, 124]
[id, counter, 125] [assign, =, 125] [id, a, 125] [semicol, ;, 125] 
[inlinecmt, // 11.1\n, 125]
[id, f, 126] [openpar, (, 126] [intnum, 1, 126] [comma, ,, 126] [intnum, 1, 126] [comma, ,, 126] [intnum, 1, 126] [closepar, ), 126] [semicol, ;, 126] 
[inlinecmt, // 12.1\n, 126]
[id, f, 127] [openpar, (, 127] [floatnum, 1.2, 127] [comma, ,, 127] [intnum, 1, 127] [closepar, ), 127] [semicol, ;, 127] 
[inlinecmt, // 12.2	\n, 127]
[id, i, 128] [opensqbr, [, 128] [intnum, 2, 128] [closesqbr, ], 128] [assign, =, 128] [intnum, 1, 128] [semicol, ;, 128] 
[inlinecmt, // 13.1\n, 128]
[id, i, 129] [opensqbr, [, 129] [intnum, 2, 129] [closesqbr, ], 129] [opensqbr, [, 129] [floatnum, 1.3, 129] [closesqbr, ], 129] [assign, =, 129] [intnum, 2, 129] [semicol, ;, 129] 
[inlinecmt, // 13.2\n, 129]
[id, f3, 130] [openpar, (, 130] [id, j, 130] [closepar, ), 130] [semicol, ;, 130] 
[inlinecmt, // 13.3\n, 130]
[id, counter, 131] [dot, ., 131] [id, x, 131] [assign, =, 131] [intnum, 1, 131] [semicol, ;, 131] 
[inlinecmt, // 15.1\n, 131]
[id, counter, 132] [assign, =, 132] [id, self, 132] [semicol, ;, 132] 
[inlinecmt, // 15.2\n, 132]
[while, while, 133] [openpar, (, 133] [id, counter, 133] [leq, <=, 133] [intnum, 10, 133] [closepar, ), 133] 
[opencubr, {, 134] 
[write, write, 135] [openpar, (, 135] [id, counter, 135] [closepar, ), 135] [semicol, ;, 135] 
[write, write, 136] [openpar, (, 136] [id, f1, 136] [dot, ., 136] [id, evaluate, 136] [openpar, (, 136] [id, counter, 136] [closepar, ), 136] [closepar, ), 136] [semicol, ;, 136] 
[inlinecmt, // 11.3\n, 136]
[write, write, 137] [openpar, (, 137] [id, f2, 137] [dot, ., 137] [id, evaluate, 137] [openpar, (, 137] [id, counter, 137] [closepar, ), 137] [closepar, ), 137] [semicol, ;, 137] 
[inlinecmt, // 11.3\n, 137]
[closecubr, }, 138] [semicol, ;, 138] 
[closecubr, }, 139] 
[blockcmt, /*\n1.   |X| Global symbol table \n2.   |X| Class symbol table\n3.1  |X| Class data member\n3.2  |X| Function's local variable\n4.1  |X| Free function\n4.2  |X| Member function\n6.1  |X| Undeclared member function definition\n6.2  |X| Undefined member function declaration\n8.1  |X| Multiply declared class\n8.2  |X| Multiply defined free function\n8.3  |X| Multiply declared identifier in class\n8.4  |X| Multiply declared identifier in function\n8.5  |X| Shadowed inherited data member\n9.1  |X| Overloaded free function\n9.2  |X| Overloaded member function\n9.3  |X| Overridden inherited member function\n10.1 |X| Type error in expression\n10.2 |X| Type error in assignment statement \n10.3 |X| Type error in return statement\n11.1 |X| Undeclared local variable\n11.2 |X| Undeclared data member\n11.3 |X| Undeclared member function\n11.4 |X| Undeclared free function\n11.5 |X| Undeclared class\n12.1 |X| function call with wrong number of parameters\n12.2 |X| function call with wrong type of parameters\n13.1 |X| Use of array with wrong number of dimensions\n13.2 |X| Array index is not an integer\n13.3 |X| Array parameter using wrong number of dimensions\n14.1 |X| Circular class dependency\n15.1 |X| "." operator used on non-class type\n15.2 |X| incorrect use of "self" \n*/, 141]
