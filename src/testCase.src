class POLYNOMIAL {
  public function evaluate: (x: integer) => integer;
};

class RANDOM isa POLYNOMIAL {
  public function test: () => void;
  private attribute a: integer;
  //private attribute a: integer;
  //public attribute b: QUADRATIC[];
};

class LINEAR isa POLYNOMIAL, RANDOM {
  private attribute a: integer;
  private attribute b: integer;
  public  constructor: (A: integer, B: integer);
  private  function evaluate: (x: integer) => integer;
};

class QUADRATIC isa POLYNOMIAL {
  private attribute a: integer;
  private attribute b: integer;
  private attribute c: integer;
  private attribute d: RANDOM[];
  public  constructor: (A: integer, B: integer, C: integer);
  public  constructor: (A: integer);
  public  function evaluate: (x: integer) => integer;
};

// Multiple class declaration error test
class QUADRATIC isa POLYNOMIAL {
  private attribute a: integer;
  private attribute b: integer;
  public constructor: (A: integer, B: integer, C: integer);
};

// ====== member function implementations ====== //  
function POLYNOMIAL::evaluate(x: integer) => integer
{
  return (0);
}

function QUADRATIC::evaluate(x: integer) => integer
{
  localvar result: integer;
  localvar a: float;                                // Over-shadowed member variable test
  //Using Horner's method
  result = a;
  result = result * x + b;
  result = result * not x + c;
  return (result);
}

function QUADRATIC::constructor(A: integer, B: integer, C: integer)
{
  self.a = A;
  self.b = B;
  self.c = C;
}

function QUADRATIC::constructor(A: integer)
{
  self.a = A;
}

function LINEAR::constructor(A: integer, B: integer) 
{
  self.a = A;
  self.b = B;
}

function LINEAR::evaluate(x: integer) => integer 
{
  localvar result: integer;
  result = 0;
  result = self.a * x + b;
  return (result);
}

function count(x: integer) => integer
{
    return (x);
}

// ====== main ====== //
function prog() => void
{
  localvar f1: LINEAR(-2, 3);
  localvar f2: QUADRATIC(-2, 1, 0);
  localvar counter: integer;
  localvar test: count(2);

  counter = -1;	
  write(f2.a);

  while(counter <= 10)
  {
    //write(counter);
    //write(f1.evaluate(counter));
    //write(f2.evaluate(counter));
    //write(f1.a);
    counter = counter + 1;
  };
}

function prog() => void
{
  localvar f3: LINEAR(1, 2);
}

function prog(x: integer) => void 
{
  localvar a: float;
}

